#!/bin/bash


while getopts :s:w:h opt; do
    case $opt in
        s)
            SPARK_IMAGE=$OPTARG
            ;;
        w)
            WEBROUTE=$OPTARG
            ;;
        h)
            echo "Usage: oshinko-setup.sh [-w <hostname to use in exposed route to oshinko-web]"
            echo "Example: oshinko-setup.sh -w mywebui.10.16.40.70.xip.io"
            echo "    results in the oshinko web service exposed at mywebui.10.16.40.70.xip.io"
            echo "If -w is not set, the default route will be used based on routing suffix, etc set at installation"
            echo ""
            echo "Usage: oshinko-setup.sh [-s <spark docker image to use for clusters>]"
            echo "Example: oshinko-setup.sh -s myregistry.com:5000/sparkimage"
            echo ""
            echo "Note, it is important that the version of spark used in the pyspark builder image"
            echo "matches the version used in clusters. Therefore, if the -s flag is specified the"
            echo "pyspark builder image will not be generated by this script. You may generate it"
            echo "yourself from the oshinko-s2i repository after modifying the Dockerfile accordingly".
            exit
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit
            ;;
    esac
done

# install some stuff we need for building
rpm -qa | grep -qw git || sudo yum -y install git
rpm -qa | grep -qw golang || sudo yum -y install golang
rpm -qa | grep -qw make || sudo yum -y install make
rpm -qa | grep -qw docker || sudo yum -y install docker
rpm -qa | grep -qw wget || sudo yum -y install wget
rpm -qa | grep -qw tar || sudo yum -y install tar

############ get the oshinko repos and build the images

sudo systemctl start docker 

CURRDIR=`pwd`
export GOPATH=$CURRDIR/oshinko

SRCDIR=$CURRDIR/oshinko/src/github.com/radanalyticsio
mkdir -p $SRCDIR
cd $SRCDIR
if [ ! -d "oshinko-cli" ]; then
    git clone git@github.com:radanalyticsio/oshinko-cli
fi
if [ ! -d "oshinko-webui" ]; then
    git clone git@github.com:radanalyticsio/oshinko-webui
fi
if [ ! -d "oshinko-s2i" ]; then
    git clone git@github.com:radanalyticsio/oshinko-s2i
fi

cd $SRCDIR/oshinko-cli/rest; sudo make image
cd $SRCDIR/oshinko-webui; sudo docker build -t oshinko-webui .

if [ -z $SPARK_IMAGE ]; then
    cd $SRCDIR
    if [ ! -d "openshift-spark" ]; then
        git clone git@github.com:radanalyticsio/openshift-spark
    fi
    # this works but it can probably be smarter .. maybe hadoop doesn't
    # have to download each time. Maybe we can check for current images?
    cd $SRCDIR/openshift-spark; sudo make build

    # Make the s2i images since we are using defaults
    cd $SRCDIR/oshinko-s2i/pyspark; make build
    cd $SRCDIR/oshinko-s2i/java; make build
fi

########### get the origin image and run oc cluster up
########### this part can be replaced with some other openshift install recipe

cd $CURRDIR
ORIGIN_VERSION=v1.4.1
ORIGIN_TARBALL=openshift-origin-server-v1.4.1-3f9807a-linux-64bit.tar.gz
ORIGIN_DIR=$CURRDIR/`tar -tzf $ORIGIN_TARBALL | head -1 | cut -f1 -d"/"`

if [ ! -d "$ORIGIN_DIR" ]; then
    wget https://github.com/openshift/origin/releases/download/$ORIGIN_VERSION/$ORIGIN_TARBALL
    tar -xvzf $ORIGIN_TARBALL
fi
if [ -d "$ORIGIN_DIR" ]; then
    export PATH=$ORIGIN_DIR:$PATH
fi
echo Using `which oc` for oc

sudo sed -i -e "/^# INSECURE_REGISTRY/{ s/.*/INSECURE_REGISTRY='--insecure-registry 172.30.0.0\/16'/ }" /etc/sysconfig/docker
sudo systemctl restart docker

# make sure your local host name can be resolved!
# put it in /etc/hosts if you have to, otherwise you will have no nodes
sudo oc cluster up

############

# Get the address of the docker registry so we can push our images to it
sudo oc login -u system:admin
sudo oc project default
REGISTRY=$(sudo oc get service docker-registry --template='{{index .spec.clusterIP}}:{{index .spec.ports 0 "port"}}')
ROUTERIP=$(sudo oc get service router --template='{{index .spec.clusterIP}}')

# Push to a default oshinko project for a default oshinko user
oc login https://localhost:8443 -u oshinko -p oshinko
oc new-project oshinko

# Wait for the registry to be fully up
r=1
while [ $r -ne 0 ]; do
    sudo docker login -u oshinko -e "jack@jack.com" -p $(oc whoami -t) $REGISTRY
    r=$?
    sleep 1
done

if [ -z $SPARK_IMAGE ]; then
    sudo docker tag radanalytics-pyspark $REGISTRY/oshinko/radanalytics-pyspark
    sudo docker push $REGISTRY/oshinko/radanalytics-pyspark
    sudo docker tag openshift-spark $REGISTRY/oshinko/oshinko-spark
else
    sudo docker tag $SPARK_IMAGE $REGISTRY/oshinko/oshinko-spark
fi
sudo docker push $REGISTRY/oshinko/oshinko-spark
sudo docker tag oshinko-rest $REGISTRY/oshinko/oshinko-rest
sudo docker push $REGISTRY/oshinko/oshinko-rest
sudo docker tag oshinko-webui $REGISTRY/oshinko/oshinko-webui
sudo docker push $REGISTRY/oshinko/oshinko-webui

# set up the oshinko service account
oc create sa oshinko                          # note, VV, first oshinko is the proj name :)
oc policy add-role-to-user admin system:serviceaccount:oshinko:oshinko -n oshinko

# process the standard oshinko template and launch it
if [ -n "$WEBROUTE" ] ; then
    ROUTEVALUE=$WEBROUTE
fi

cd $SRCDIR/oshinko-cli/rest

oc process -f tools/server-ui-template.yaml \
OSHINKO_SERVER_IMAGE=$REGISTRY/oshinko/oshinko-rest \
OSHINKO_CLUSTER_IMAGE=$REGISTRY/oshinko/oshinko-spark \
OSHINKO_WEB_IMAGE=$REGISTRY/oshinko/oshinko-webui \
OSHINKO_WEB_ROUTE_HOSTNAME=$ROUTEVALUE > $CURRDIR/oshinko-template.json

oc create -f $CURRDIR/oshinko-template.json

# Add the s2I template
oc create -f $SRCDIR/oshinko-s2i/pyspark/pysparkbuild.json
oc create -f $SRCDIR/oshinko-s2i/pyspark/pysparkjob.json
oc create -f $SRCDIR/oshinko-s2i/pyspark/pysparkdc.json
oc create -f $SRCDIR/oshinko-s2i/pyspark/pysparkbuilddc.json
